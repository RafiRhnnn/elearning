name: Deploy Laravel to VPS

on:
  push:
    branches:
      - "production"

jobs:
  deploy:
    name: CI/CD to VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -eo pipefail # Exit segera jika ada perintah yang gagal

            REPO="https://github.com/RafiRhnnn/elearning.git"
            DIR="${{ secrets.VPS_PATH }}"
            CONTAINER="laravel_php_fpm" # Ubah ini ke nama kontainer PHP-FPM
            BRANCH="production"

            echo "Cek git..."
            if ! command -v git &>/dev/null; then
                echo "Install git..."
                sudo apt-get update && sudo apt-get install -y git
            fi

            echo "Cek docker..."
            if ! command -v docker &>/dev/null; then
                echo "Install docker..."
                curl -fsSL https://get.docker.com | sh
                sudo usermod -aG docker $USER || true # Tambahkan || true agar tidak gagal jika user sudah di grup
            fi

            echo "Cek docker compose..."
            if ! docker compose version &>/dev/null; then
                echo "Install docker compose plugin..."
                mkdir -p ~/.docker/cli-plugins
                curl -SL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 \
                    -o ~/.docker/cli-plugins/docker-compose
                chmod +x ~/.docker/cli-plugins/docker-compose
            fi

            echo "Cek nodejs 20..."
            if ! command -v node &>/dev/null || ! node -v | grep -q "v20"; then
                echo "Install Node.js 20..."
                curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                sudo apt-get install -y nodejs
            fi

            echo "Clone atau pull repo..."
            if [ ! -d "$DIR/.git" ]; then
                echo "Clone repo ke $DIR..."
                git clone --branch "$BRANCH" "$REPO" "$DIR"
            else
                echo "Pull update di $DIR..."
                cd "$DIR"
                git fetch
                git pull origin "$BRANCH"
            fi

            echo "Menyimpan .env lengkap untuk Laravel (dari GitHub Secret LARAVEL_ENV)..."
            mkdir -p "$DIR"
            # Tulis konten utama LARAVEL_ENV, hapus carriage return
            echo "${{ secrets.LARAVEL_ENV }}" | tr -d '\r' > "$DIR/.env"
            # Pastikan ada newline di akhir file untuk menghindari penggabungan baris
            echo "" >> "$DIR/.env"

            # Ekstrak variabel DB dan APP_PORT dari .env utama ke .env.docker
            echo "Membuat .env.docker untuk Docker Compose dengan variabel yang diperlukan..."
            # Clear existing .env.docker if it exists
            > "$DIR/.env.docker"

            # Baca .env baris per baris dan tambahkan variabel yang relevan ke .env.docker
            {
              grep '^APP_PORT=' "$DIR/.env" | tr -d '\r'
              grep '^DB_CONNECTION=' "$DIR/.env" | tr -d '\r'
              grep '^DB_HOST=' "$DIR/.env" | tr -d '\r'
              grep '^DB_PORT=' "$DIR/.env" | tr -d '\r'
              grep '^DB_DATABASE=' "$DIR/.env" | tr -d '\r'
              grep '^DB_USERNAME=' "$DIR/.env" | tr -d '\r'
              grep '^DB_PASSWORD=' "$DIR/.env" | tr -d '\r'
              # Tambahkan SSLMODE dan SSL_CA hanya jika mereka ada dan tidak kosong
              if [ -n "$(grep '^DB_SSLMODE=' "$DIR/.env")" ]; then
                grep '^DB_SSLMODE=' "$DIR/.env" | tr -d '\r'
              fi
            } >> "$DIR/.env.docker"


            echo "Masuk direktori $DIR..."
            cd "$DIR"

            echo "Restart Docker Compose..."
            docker compose down || true 

            # Jalankan docker compose up dan tangkap status keluarnya
            if ! docker compose --env-file .env.docker up -d --build; then 
                echo "ERROR: Docker Compose gagal memulai! Memeriksa log..."
                docker compose logs
                exit 1 
            fi

            sleep 5 

            echo "Menunggu Laravel PHP-FPM container siap..."
            # Cek apakah kontainer sudah berjalan dengan memeriksa ID-nya
            if ! docker compose ps -q "$CONTAINER"; then
                echo "ERROR: Kontainer $CONTAINER tidak ditemukan atau tidak berjalan setelah startup!"
                docker compose logs "$CONTAINER"
                exit 1
            fi

            echo "Laravel PHP-FPM container sudah berjalan. Melanjutkan instalasi Laravel..."

            echo "Menjalankan composer install..."
            docker exec "$CONTAINER" composer install --optimize-autoloader --no-dev || { echo "ERROR: Composer install gagal! Lihat log kontainer."; docker compose logs "$CONTAINER"; exit 1; }

            echo "Menghasilkan APP_KEY..."
            docker exec "$CONTAINER" php artisan key:generate || { echo "ERROR: Key generate gagal! Lihat log kontainer."; docker compose logs "$CONTAINER"; exit 1; }

            echo "Menjalankan migrasi database..."
            docker exec "$CONTAINER" php artisan migrate --force || { echo "ERROR: Migrasi database gagal! Lihat log kontainer."; docker compose logs "$CONTAINER"; exit 1; }

            echo "Membuat symbolic link storage..."
            docker exec "$CONTAINER" php artisan storage:link || { echo "ERROR: Storage link gagal! Lihat log kontainer."; docker compose logs "$CONTAINER"; exit 1; }

            echo "Mengoptimalkan cache Laravel..."
            docker exec "$CONTAINER" php artisan config:clear
            docker exec "$CONTAINER" php artisan cache:clear
            docker exec "$CONTAINER" php artisan view:clear
            docker exec "$CONTAINER" php artisan route:clear
            docker exec "$CONTAINER" php artisan config:cache
            docker exec "$CONTAINER" php artisan route:cache
            docker exec "$CONTAINER" php artisan view:cache

            sleep 2
            echo "jalankan npm install..."
            docker exec "$CONTAINER" npm install || { echo "ERROR: NPM install gagal! Lihat log kontainer."; docker compose logs "$CONTAINER"; exit 1; }
            echo "jalankan npm run build..."
            docker exec "$CONTAINER" npm run build || { echo "ERROR: NPM build gagal! Lihat log kontainer."; docker compose logs "$CONTAINER"; exit 1; }

            echo "Selesai! Aplikasi Laravel telah dideploy."
